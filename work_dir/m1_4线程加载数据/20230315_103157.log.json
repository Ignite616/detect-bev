{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA T1200 Laptop GPU\nCUDA_HOME: /usr/local/cuda-11.6\nNVCC: Build cuda_11.6.r11.6/compiler.30794723_0\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.9.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0\nOpenCV: 4.6.0\nMMCV: 1.4.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.14.0\nMMSegmentation: 0.14.1\nMMDetection3D: 0.16.0+", "config": "model = dict(\n    type='FastBEV',\n    style='v1',\n    backbone=dict(\n        type='ResNet',\n        depth=18,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet18'),\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN', requires_grad=True),\n        in_channels=[64, 128, 256, 512],\n        out_channels=64,\n        num_outs=4),\n    neck_fuse=dict(in_channels=[256], out_channels=[64]),\n    neck_3d=dict(\n        type='M2BevNeck',\n        in_channels=256,\n        out_channels=192,\n        num_layers=2,\n        stride=2,\n        is_transpose=False,\n        fuse=dict(in_channels=1024, out_channels=256),\n        norm_cfg=dict(type='BN', requires_grad=True)),\n    seg_head=None,\n    bbox_head=dict(\n        type='FreeAnchor3DHead',\n        is_transpose=True,\n        num_classes=10,\n        in_channels=192,\n        feat_channels=192,\n        num_convs=0,\n        use_direction_classifier=True,\n        pre_anchor_topk=25,\n        bbox_thr=0.5,\n        gamma=2.0,\n        alpha=0.5,\n        anchor_generator=dict(\n            type='AlignedAnchor3DRangeGenerator',\n            ranges=[[-50, -50, -1.8, 50, 50, -1.8]],\n            sizes=[[0.866, 2.5981, 1.0], [0.5774, 1.7321, 1.0],\n                   [1.0, 1.0, 1.0], [0.4, 0.4, 1]],\n            custom_values=[0, 0],\n            rotations=[0, 1.57],\n            reshape_out=True),\n        assigner_per_size=False,\n        diff_rad_by_sin=True,\n        dir_offset=0.7854,\n        dir_limit_offset=0,\n        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder', code_size=9),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=0.8),\n        loss_dir=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.8)),\n    multi_scale_id=[0],\n    n_voxels=[[200, 200, 4]],\n    voxel_size=[[0.5, 0.5, 1.5]],\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            iou_calculator=dict(type='BboxOverlapsNearest3D'),\n            pos_iou_thr=0.6,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            ignore_iof_thr=-1),\n        allowed_border=0,\n        code_weight=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        score_thr=0.05,\n        min_bbox_size=0,\n        nms_pre=1000,\n        max_num=500,\n        use_scale_nms=True,\n        use_tta=False,\n        nms_across_levels=False,\n        use_rotate_nms=True,\n        nms_thr=0.2,\n        nms_type_list=[\n            'rotate', 'rotate', 'rotate', 'rotate', 'rotate', 'rotate',\n            'rotate', 'rotate', 'rotate', 'circle'\n        ],\n        nms_thr_list=[0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.5, 0.5, 0.2],\n        nms_radius_thr_list=[4, 12, 10, 10, 12, 0.85, 0.85, 0.175, 0.175, 1],\n        nms_rescale_factor=[1.0, 0.7, 0.55, 0.4, 0.7, 1.0, 1.0, 4.5, 9.0,\n                            1.0]))\npoint_cloud_range = [-50, -50, -5, 50, 50, 3]\nclass_names = [\n    'car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle',\n    'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n]\ndataset_type = 'NuScenesMultiView_Map_Dataset2'\ndata_root = './data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=True)\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ndata_config = dict(\n    src_size=(900, 1600),\n    input_size=(320, 880),\n    resize=(-0.06, 0.11),\n    crop=(-0.05, 0.05),\n    rot=(-5.4, 5.4),\n    flip=True,\n    test_input_size=(320, 880),\n    test_resize=0.0,\n    test_rotate=0.0,\n    test_flip=False,\n    pad=(0, 0, 0, 0),\n    pad_divisor=32,\n    pad_color=(0, 0, 0))\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='MultiViewPipeline',\n        sequential=True,\n        n_images=6,\n        n_times=4,\n        transforms=[\n            dict(\n                type='LoadImageFromFile',\n                file_client_args=dict(backend='disk'))\n        ]),\n    dict(\n        type='LoadAnnotations3D',\n        with_bbox=True,\n        with_label=True,\n        with_bev_seg=True),\n    dict(\n        type='LoadPointsFromFile',\n        dummy=True,\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5),\n    dict(\n        type='RandomFlip3D',\n        flip_2d=False,\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5,\n        update_img2lidar=True),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.3925, 0.3925],\n        scale_ratio_range=[0.95, 1.05],\n        translation_std=[0.05, 0.05, 0.05],\n        update_img2lidar=True),\n    dict(\n        type='RandomAugImageMultiViewImage',\n        data_config=dict(\n            src_size=(900, 1600),\n            input_size=(320, 880),\n            resize=(-0.06, 0.11),\n            crop=(-0.05, 0.05),\n            rot=(-5.4, 5.4),\n            flip=True,\n            test_input_size=(320, 880),\n            test_resize=0.0,\n            test_rotate=0.0,\n            test_flip=False,\n            pad=(0, 0, 0, 0),\n            pad_divisor=32,\n            pad_color=(0, 0, 0))),\n    dict(\n        type='ObjectRangeFilter', point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n    dict(type='KittiSetOrigin', point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ]),\n    dict(\n        type='Collect3D',\n        keys=[\n            'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_3d', 'gt_labels_3d',\n            'gt_bev_seg'\n        ])\n]\ntest_pipeline = [\n    dict(\n        type='MultiViewPipeline',\n        sequential=True,\n        n_images=6,\n        n_times=4,\n        transforms=[\n            dict(\n                type='LoadImageFromFile',\n                file_client_args=dict(backend='disk'))\n        ]),\n    dict(\n        type='LoadPointsFromFile',\n        dummy=True,\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5),\n    dict(\n        type='RandomAugImageMultiViewImage',\n        data_config=dict(\n            src_size=(900, 1600),\n            input_size=(320, 880),\n            resize=(-0.06, 0.11),\n            crop=(-0.05, 0.05),\n            rot=(-5.4, 5.4),\n            flip=True,\n            test_input_size=(320, 880),\n            test_resize=0.0,\n            test_rotate=0.0,\n            test_flip=False,\n            pad=(0, 0, 0, 0),\n            pad_divisor=32,\n            pad_color=(0, 0, 0)),\n        is_train=False),\n    dict(type='KittiSetOrigin', point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        dataset=dict(\n            type='NuScenesMultiView_Map_Dataset2',\n            data_root='./data/nuscenes/',\n            pipeline=[\n                dict(\n                    type='MultiViewPipeline',\n                    sequential=True,\n                    n_images=6,\n                    n_times=4,\n                    transforms=[\n                        dict(\n                            type='LoadImageFromFile',\n                            file_client_args=dict(backend='disk'))\n                    ]),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox=True,\n                    with_label=True,\n                    with_bev_seg=True),\n                dict(\n                    type='LoadPointsFromFile',\n                    dummy=True,\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5),\n                dict(\n                    type='RandomFlip3D',\n                    flip_2d=False,\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5,\n                    update_img2lidar=True),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.3925, 0.3925],\n                    scale_ratio_range=[0.95, 1.05],\n                    translation_std=[0.05, 0.05, 0.05],\n                    update_img2lidar=True),\n                dict(\n                    type='RandomAugImageMultiViewImage',\n                    data_config=dict(\n                        src_size=(900, 1600),\n                        input_size=(320, 880),\n                        resize=(-0.06, 0.11),\n                        crop=(-0.05, 0.05),\n                        rot=(-5.4, 5.4),\n                        flip=True,\n                        test_input_size=(320, 880),\n                        test_resize=0.0,\n                        test_rotate=0.0,\n                        test_flip=False,\n                        pad=(0, 0, 0, 0),\n                        pad_divisor=32,\n                        pad_color=(0, 0, 0))),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n                dict(\n                    type='KittiSetOrigin',\n                    point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n                dict(\n                    type='NormalizeMultiviewImage',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'trailer', 'bus',\n                        'construction_vehicle', 'bicycle', 'motorcycle',\n                        'pedestrian', 'traffic_cone', 'barrier'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=[\n                        'img', 'gt_bboxes', 'gt_labels', 'gt_bboxes_3d',\n                        'gt_labels_3d', 'gt_bev_seg'\n                    ])\n            ],\n            classes=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            modality=dict(\n                use_lidar=False,\n                use_camera=True,\n                use_radar=False,\n                use_map=False,\n                use_external=True),\n            test_mode=False,\n            with_box2d=True,\n            box_type_3d='LiDAR',\n            ann_file=\n            'data/nuscenes/nuscenes_infos_train_4d_interval3_max60.pkl',\n            load_interval=1,\n            sequential=True,\n            n_times=4,\n            train_adj_ids=[1, 3, 5],\n            speed_mode='abs_velo',\n            max_interval=10,\n            min_interval=0,\n            fix_direction=True,\n            prev_only=True,\n            test_adj='prev',\n            test_adj_ids=[1, 3, 5],\n            test_time_id=None)),\n    val=dict(\n        type='NuScenesMultiView_Map_Dataset2',\n        data_root='./data/nuscenes/',\n        pipeline=[\n            dict(\n                type='MultiViewPipeline',\n                sequential=True,\n                n_images=6,\n                n_times=4,\n                transforms=[\n                    dict(\n                        type='LoadImageFromFile',\n                        file_client_args=dict(backend='disk'))\n                ]),\n            dict(\n                type='LoadPointsFromFile',\n                dummy=True,\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5),\n            dict(\n                type='RandomAugImageMultiViewImage',\n                data_config=dict(\n                    src_size=(900, 1600),\n                    input_size=(320, 880),\n                    resize=(-0.06, 0.11),\n                    crop=(-0.05, 0.05),\n                    rot=(-5.4, 5.4),\n                    flip=True,\n                    test_input_size=(320, 880),\n                    test_resize=0.0,\n                    test_rotate=0.0,\n                    test_flip=False,\n                    pad=(0, 0, 0, 0),\n                    pad_divisor=32,\n                    pad_color=(0, 0, 0)),\n                is_train=False),\n            dict(\n                type='KittiSetOrigin',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ],\n                with_label=False),\n            dict(type='Collect3D', keys=['img'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=True,\n        with_box2d=True,\n        box_type_3d='LiDAR',\n        ann_file='data/nuscenes/nuscenes_infos_val_4d_interval3_max60.pkl',\n        load_interval=1,\n        sequential=True,\n        n_times=4,\n        train_adj_ids=[1, 3, 5],\n        speed_mode='abs_velo',\n        max_interval=10,\n        min_interval=0,\n        fix_direction=True,\n        test_adj='prev',\n        test_adj_ids=[1, 3, 5],\n        test_time_id=None),\n    test=dict(\n        type='NuScenesMultiView_Map_Dataset2',\n        data_root='./data/nuscenes/',\n        pipeline=[\n            dict(\n                type='MultiViewPipeline',\n                sequential=True,\n                n_images=6,\n                n_times=4,\n                transforms=[\n                    dict(\n                        type='LoadImageFromFile',\n                        file_client_args=dict(backend='disk'))\n                ]),\n            dict(\n                type='LoadPointsFromFile',\n                dummy=True,\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5),\n            dict(\n                type='RandomAugImageMultiViewImage',\n                data_config=dict(\n                    src_size=(900, 1600),\n                    input_size=(320, 880),\n                    resize=(-0.06, 0.11),\n                    crop=(-0.05, 0.05),\n                    rot=(-5.4, 5.4),\n                    flip=True,\n                    test_input_size=(320, 880),\n                    test_resize=0.0,\n                    test_rotate=0.0,\n                    test_flip=False,\n                    pad=(0, 0, 0, 0),\n                    pad_divisor=32,\n                    pad_color=(0, 0, 0)),\n                is_train=False),\n            dict(\n                type='KittiSetOrigin',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ],\n                with_label=False),\n            dict(type='Collect3D', keys=['img'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=True,\n        with_box2d=True,\n        box_type_3d='LiDAR',\n        ann_file='data/nuscenes/nuscenes_infos_val_4d_interval3_max60.pkl',\n        load_interval=1,\n        sequential=True,\n        n_times=4,\n        train_adj_ids=[1, 3, 5],\n        speed_mode='abs_velo',\n        max_interval=10,\n        min_interval=0,\n        fix_direction=True,\n        test_adj='prev',\n        test_adj_ids=[1, 3, 5],\n        test_time_id=None))\noptimizer = dict(\n    type='AdamW2',\n    lr=0.0004,\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(backbone=dict(lr_mult=0.1, decay_mult=1.0))))\noptimizer_config = dict(grad_clip=dict(max_norm=35.0, norm_type=2))\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0,\n    by_epoch=False)\ntotal_epochs = 20\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=10,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\nevaluation = dict(interval=5)\ndist_params = dict(backend='nccl')\nfind_unused_parameters = True\nlog_level = 'INFO'\nload_from = 'cascade_mask_rcnn_r18_fpn_coco-mstrain_3x_20e_nuim_bbox_mAP_0.5110_segm_mAP_0.4070.pth'\nresume_from = None\nworkflow = [('train', 1)]\nfp16 = dict(loss_scale='dynamic')\nwork_dir = 'work_dir'\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "fastbev_m1_r18_s320x880_v200x200x4_c192_d2_f4.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.0, "memory": 2204, "data_time": 0.34881, "positive_bag_loss": 2.38759, "negative_bag_loss": 114.61377, "loss": 117.00136, "grad_norm": Infinity, "time": 2.15378}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 1e-05, "memory": 2204, "data_time": 0.00861, "positive_bag_loss": 2.59609, "negative_bag_loss": 217.98704, "loss": 220.58313, "grad_norm": Infinity, "time": 1.15756}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 1e-05, "memory": 2204, "data_time": 0.00984, "positive_bag_loss": 2.45051, "negative_bag_loss": 171.44308, "loss": 173.89359, "grad_norm": Infinity, "time": 1.15973}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 2e-05, "memory": 2204, "data_time": 0.00946, "positive_bag_loss": 2.67644, "negative_bag_loss": 214.00681, "loss": 216.68325, "grad_norm": 226.39682, "time": 1.16118}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 2e-05, "memory": 2204, "data_time": 0.00926, "positive_bag_loss": 2.50268, "negative_bag_loss": 173.44925, "loss": 175.95193, "grad_norm": 184.86134, "time": 1.15925}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 2e-05, "memory": 2204, "data_time": 0.00825, "positive_bag_loss": 2.62143, "negative_bag_loss": 271.65003, "loss": 274.27146, "grad_norm": 288.2646, "time": 1.16088}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 3e-05, "memory": 2204, "data_time": 0.0091, "positive_bag_loss": 2.48191, "negative_bag_loss": 167.94886, "loss": 170.43076, "grad_norm": 178.09481, "time": 1.16245}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 3e-05, "memory": 2204, "data_time": 0.00822, "positive_bag_loss": 2.48445, "negative_bag_loss": 155.89663, "loss": 158.38108, "grad_norm": 153.88748, "time": 1.16057}
{"mode": "train", "epoch": 1, "iter": 90, "lr": 4e-05, "memory": 2204, "data_time": 0.00913, "positive_bag_loss": 2.33938, "negative_bag_loss": 117.37359, "loss": 119.71297, "grad_norm": 124.80188, "time": 1.16249}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 4e-05, "memory": 2204, "data_time": 0.00814, "positive_bag_loss": 2.51563, "negative_bag_loss": 130.23291, "loss": 132.74854, "grad_norm": 153.0378, "time": 1.16287}
{"mode": "train", "epoch": 1, "iter": 110, "lr": 4e-05, "memory": 2204, "data_time": 0.00976, "positive_bag_loss": 2.50807, "negative_bag_loss": 109.79054, "loss": 112.29861, "grad_norm": 132.24088, "time": 1.16567}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 5e-05, "memory": 2204, "data_time": 0.00873, "positive_bag_loss": 2.47706, "negative_bag_loss": 113.26782, "loss": 115.74488, "grad_norm": 142.13881, "time": 1.16808}
{"mode": "train", "epoch": 1, "iter": 130, "lr": 5e-05, "memory": 2204, "data_time": 0.00995, "positive_bag_loss": 2.53983, "negative_bag_loss": 112.71991, "loss": 115.25974, "grad_norm": 147.35736, "time": 1.17342}
{"mode": "train", "epoch": 1, "iter": 140, "lr": 5e-05, "memory": 2204, "data_time": 0.00883, "positive_bag_loss": 2.36185, "negative_bag_loss": 94.87731, "loss": 97.23916, "grad_norm": 127.58098, "time": 1.17012}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 6e-05, "memory": 2204, "data_time": 0.00955, "positive_bag_loss": 2.29474, "negative_bag_loss": 54.67637, "loss": 56.97111, "grad_norm": 80.99137, "time": 1.17259}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 6e-05, "memory": 2204, "data_time": 0.00867, "positive_bag_loss": 2.2912, "negative_bag_loss": 67.52077, "loss": 69.81198, "grad_norm": 95.78778, "time": 1.17085}
{"mode": "train", "epoch": 1, "iter": 170, "lr": 7e-05, "memory": 2204, "data_time": 0.00964, "positive_bag_loss": 2.29307, "negative_bag_loss": 46.71379, "loss": 49.00686, "grad_norm": 68.87013, "time": 1.17286}
{"mode": "train", "epoch": 1, "iter": 180, "lr": 7e-05, "memory": 2204, "data_time": 0.00877, "positive_bag_loss": 2.21479, "negative_bag_loss": 43.46045, "loss": 45.67525, "grad_norm": 71.67439, "time": 1.17495}
{"mode": "train", "epoch": 1, "iter": 190, "lr": 7e-05, "memory": 2204, "data_time": 0.00957, "positive_bag_loss": 2.28894, "negative_bag_loss": 59.3172, "loss": 61.60613, "grad_norm": 95.98027, "time": 1.17457}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 8e-05, "memory": 2204, "data_time": 0.00883, "positive_bag_loss": 2.34015, "negative_bag_loss": 46.07438, "loss": 48.41454, "grad_norm": 77.53795, "time": 1.16995}
{"mode": "train", "epoch": 1, "iter": 210, "lr": 8e-05, "memory": 2204, "data_time": 0.00979, "positive_bag_loss": 2.3726, "negative_bag_loss": 58.01678, "loss": 60.38937, "grad_norm": 98.34302, "time": 1.1721}
{"mode": "train", "epoch": 1, "iter": 220, "lr": 8e-05, "memory": 2204, "data_time": 0.009, "positive_bag_loss": 2.25441, "negative_bag_loss": 33.51707, "loss": 35.77149, "grad_norm": 61.14824, "time": 1.17428}
{"mode": "train", "epoch": 1, "iter": 230, "lr": 9e-05, "memory": 2204, "data_time": 0.00928, "positive_bag_loss": 2.43026, "negative_bag_loss": 47.07864, "loss": 49.50889, "grad_norm": 84.89513, "time": 1.172}
{"mode": "train", "epoch": 1, "iter": 240, "lr": 9e-05, "memory": 2204, "data_time": 0.0098, "positive_bag_loss": 2.29479, "negative_bag_loss": 19.16891, "loss": 21.4637, "grad_norm": 39.70231, "time": 1.17136}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0001, "memory": 2204, "data_time": 0.00947, "positive_bag_loss": 2.27291, "negative_bag_loss": 20.32596, "loss": 22.59887, "grad_norm": 47.7882, "time": 1.16945}
{"mode": "train", "epoch": 1, "iter": 260, "lr": 0.0001, "memory": 2204, "data_time": 0.01004, "positive_bag_loss": 2.24928, "negative_bag_loss": 13.85832, "loss": 16.1076, "grad_norm": 27.4866, "time": 1.17438}
{"mode": "train", "epoch": 1, "iter": 270, "lr": 0.0001, "memory": 2204, "data_time": 0.00905, "positive_bag_loss": 2.2218, "negative_bag_loss": 10.73745, "loss": 12.95926, "grad_norm": 23.65913, "time": 1.17169}
{"mode": "train", "epoch": 1, "iter": 280, "lr": 0.00011, "memory": 2204, "data_time": 0.01028, "positive_bag_loss": 2.39557, "negative_bag_loss": 13.61921, "loss": 16.01478, "grad_norm": 33.14641, "time": 1.1706}
{"mode": "train", "epoch": 1, "iter": 290, "lr": 0.00011, "memory": 2204, "data_time": 0.00908, "positive_bag_loss": 2.39073, "negative_bag_loss": 13.69821, "loss": 16.08894, "grad_norm": 30.07308, "time": 1.17326}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00011, "memory": 2204, "data_time": 0.00955, "positive_bag_loss": 2.33243, "negative_bag_loss": 8.68928, "loss": 11.02171, "grad_norm": 21.33829, "time": 1.17263}
{"mode": "train", "epoch": 1, "iter": 310, "lr": 0.00012, "memory": 2204, "data_time": 0.0099, "positive_bag_loss": 2.41085, "negative_bag_loss": 7.74225, "loss": 10.1531, "grad_norm": 20.38974, "time": 1.17678}
{"mode": "train", "epoch": 1, "iter": 320, "lr": 0.00012, "memory": 2204, "data_time": 0.00963, "positive_bag_loss": 2.47318, "negative_bag_loss": 9.55933, "loss": 12.03251, "grad_norm": 25.02616, "time": 1.17178}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.00013, "memory": 2204, "data_time": 0.35073, "positive_bag_loss": 2.44605, "negative_bag_loss": 4.97241, "loss": 7.41846, "grad_norm": 13.48217, "time": 1.51638}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.00013, "memory": 2204, "data_time": 0.0085, "positive_bag_loss": 2.45763, "negative_bag_loss": 3.61821, "loss": 6.07585, "grad_norm": 9.80669, "time": 1.17117}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.00013, "memory": 2204, "data_time": 0.00893, "positive_bag_loss": 2.55812, "negative_bag_loss": 5.07873, "loss": 7.63685, "grad_norm": 15.71982, "time": 1.17306}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.00014, "memory": 2204, "data_time": 0.0092, "positive_bag_loss": 2.61796, "negative_bag_loss": 5.06717, "loss": 7.68513, "grad_norm": 15.3636, "time": 1.17019}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00014, "memory": 2204, "data_time": 0.00913, "positive_bag_loss": 2.48337, "negative_bag_loss": 3.73178, "loss": 6.21515, "grad_norm": 11.50832, "time": 1.17127}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.00014, "memory": 2204, "data_time": 0.00928, "positive_bag_loss": 2.56839, "negative_bag_loss": 3.178, "loss": 5.74639, "grad_norm": 9.97663, "time": 1.17507}
{"mode": "train", "epoch": 2, "iter": 70, "lr": 0.00015, "memory": 2204, "data_time": 0.00938, "positive_bag_loss": 2.56994, "negative_bag_loss": 2.79173, "loss": 5.36167, "grad_norm": 8.07252, "time": 1.17544}
{"mode": "train", "epoch": 2, "iter": 80, "lr": 0.00015, "memory": 2204, "data_time": 0.00971, "positive_bag_loss": 2.56761, "negative_bag_loss": 2.85902, "loss": 5.42663, "grad_norm": 8.55269, "time": 1.17338}
